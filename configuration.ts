/* tslint:disable */
/* eslint-disable */
/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 18.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import axios, { AxiosResponse } from "axios";
import * as http from "http";

export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}

export class oAuthCredInfo {
"access_token": string;
"tokenType": string;
"issuedAt": number;
"expiresIn": number;
"clientID": string;
"org": string;
}

export interface Authentication {
  /**
   * Apply authentication settings to header and query params.
   */
  getOAuthCredentials(requestOptions: {
    url: string;
    method: string;
    headers: object;
    [key: string]: any;
  }): Promise<{ body: oAuthCredInfo }>;
}

type IncomingMessageWithData = http.IncomingMessage & AxiosResponse<any, any>;
export class OAuth implements Authentication {
    public objOAuthCredInfo: oAuthCredInfo;
  
    public oAuthApiKey: string;
    public oAuthSecret: string;
    public oAuthUrl: string;
    public oAuthToken: string;
  
    constructor();
    constructor(oAuthApiKey?: string, oAuthSecret?: string) {
      this.oAuthApiKey = oAuthApiKey;
      this.oAuthSecret = oAuthSecret;
    }
  
    public getOAuthCredentials(): Promise<{
      response: http.IncomingMessage;
      body: oAuthCredInfo;
    }> {
      if (this.oAuthApiKey === undefined || this.oAuthSecret === undefined) {
        Promise.reject({
          response: "Validation Error",
          body: "oAuthApiKey or oAuthSecret missing",
        });
      }
  
      if (this.objOAuthCredInfo === null || this.objOAuthCredInfo === undefined) {
        return this.refreshToken();
      } else {
        if (
          Number(this.objOAuthCredInfo.issuedAt) +
            Number(this.objOAuthCredInfo.expiresIn) <
          new Date().getTime() + 10000
        ) {
          return this.refreshToken();
        }
        return Promise.resolve({ response: null, body: this.objOAuthCredInfo });
      }
    }
  
    private refreshToken(): Promise<{
      response: http.IncomingMessage;
      body: oAuthCredInfo;
    }> {
      this.oAuthToken =
        "Basic " +
        new Buffer(this.oAuthApiKey + ":" + this.oAuthSecret).toString("base64");
      //.toString('base64');
      if (this.oAuthUrl === undefined || this.oAuthUrl === null) {
        this.oAuthUrl = "https://api.precisely.com/oauth/token";
      }
  
      let requestOptions = {
        method: "POST",
        url: this.oAuthUrl,
        headers: {
          "cache-control": "no-cache",
          authorization: this.oAuthToken,
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        data: "grant_type=client_credentials",
      };
  
      return new Promise<{ response: http.IncomingMessage; body: oAuthCredInfo }>(
        (resolve, reject) => {
          axios.request(requestOptions).then(response => {
            if (response.status >= 200 && response.status <= 299) {
              this.objOAuthCredInfo = response.data;
              resolve({ response: response as IncomingMessageWithData, body: response.data });
            } else {
              reject({ response: response, body: response.data });
            }
          })
          .catch(error => {
            reject({ response: error.response, body: error.response.data });
          });
      });
    }
  }


export type Interceptor = (requestOptions: {
  url: string;
  method: string;
  headers: object;
  [key: string]: any;
}) => Promise<void> | void;
