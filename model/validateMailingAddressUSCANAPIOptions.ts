/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class ValidateMailingAddressUSCANAPIOptions {
    /**
    * Specifies whether to return a formatted version of the address.
    */
    'outputAddressBlocks'?: string = 'Y';
    /**
    * Specifies whether or not to process U.S. addresses.
    */
    'performUSProcessing'?: string = 'Y';
    /**
    * Delivery Point Validation (DPV®) validates that a specific address exists
    */
    'performDPV'?: string = 'N';
    /**
    * Specifies whether to return a formatted address when an address cannot be validated.
    */
    'outputFormattedOnFail'?: string = 'N';
    /**
    * Specifies whether to use separators (spaces or hyphens) in ZIP™ Codes or Canadian postal codes.
    */
    'outputPostalCodeSeparator'?: string = 'Y';
    /**
    * Specifies the format to use for the country name returned in the Country output field.
    */
    'outputCountryFormat'?: string = 'E';
    /**
    * Indicates whether to return multiple address for input addresses that have more than one possible matches.
    */
    'keepMultimatch'?: string = 'N';
    /**
    * Specifies the casing of the output address. M for mixed case and U for upper case.
    */
    'outputCasing'?: string = 'M';
    /**
    * Specifies a number between 1 and 10 that indicates the maximum number of addresses to be returned.
    */
    'maximumResults'?: string = '10';
    /**
    * Specifies the type of the output record.
    */
    'outputRecordType'?: string = 'A';
    /**
    * Identifies which output addresses are candidate addresses as value if Y for OutputFieldLevelReturnCodes.
    */
    'outputFieldLevelReturnCodes'?: string = 'N';
    /**
    * Determines the no stat status of an address which means it exists but cannot receive mails.
    */
    'dPVDetermineNoStat'?: string = 'N';
    /**
    * Specifies the algorithm to determe if an input address matches in the postal database.
    */
    'streetMatchingStrictness'?: string = 'M';
    /**
    * Specifies the default apartment label for the output if there is no apartment label in the input address. This is specific to French address. 
    */
    'canFrenchApartmentLabel'?: string = 'Appartement';
    /**
    * Specifies whether to use a street\'s abbreviated alias in the output if the output address line is longer than 31 characters.
    */
    'outputAbbreviatedAlias'?: string = 'N';
    /**
    * Selecting the match condition where a DPV result does NOT cause a record to fail.
    */
    'dPVSuccessfulStatusCondition'?: string = 'A';
    /**
    * Specifies where Private Mailbox (PMB) information is placed.
    */
    'standardAddressPMBLine'?: string = 'N';
    /**
    * Specifies the algorithm to determining if an input address matches in the postal database.
    */
    'firmMatchingStrictness'?: string = 'M';
    /**
    * Specifies where to place rural route delivery information.
    */
    'canRuralRouteFormat'?: string = 'A';
    /**
    * Specifies whether to select a house number of postal code in case of conflict.
    */
    'canPreferHouseNum'?: string = 'N';
    /**
    * Specifies whether to use a street\'s preferred alias in the output.
    */
    'outputPreferredAlias'?: string = 'N';
    /**
    * Specifies the algorithm to determine if an input address matches in the postal database.
    */
    'directionalMatchingStrictness'?: string = 'M';
    /**
    * Specifies whether to extract the firm name from AddressLine1 through AddressLine4 and place it in the FirmName output field.
    */
    'extractFirm'?: string = 'N';
    /**
    * Specifies whether to consider Treat Commercial Mail Receiving Agency (CMRA) matches as failures?
    */
    'failOnCMRAMatch'?: string = 'N';
    /**
    * Specifies whether or not non-civic keywords are abbreviated in the output. 
    */
    'canNonCivicFormat'?: string = 'A';
    /**
    * Changes the civic and/or suite information to match the LVR or single-single record.
    */
    'canSSLVRFlg'?: string = 'N';
    /**
    * Specifies how to handle street name aliases used in the input. This is specific to US.
    */
    'outputStreetNameAlias'?: string = 'Y';
    /**
    * Specifies the Early Warning System (EWS) that uses the USPS EWS File to validate addresses that are not in the ZIP + 4 database.
    */
    'performEWS'?: string = 'N';
    /**
    * Specifies whether to use the long, medium, or short version of the city if the city has a long name.
    */
    'canOutputCityFormat'?: string = 'D';
    /**
    * Specifies how to return a match if multiple non-blank address lines are present or multiple address types are on the same address line. (U.S. addresses only.)
    */
    'dualAddressLogic'?: string = 'N';
    /**
    * Specifies whether to perform SuiteLink processing.
    */
    'performSuiteLink'?: string = 'N';
    /**
    * Specifies where to place secondary address information in the output address.
    */
    'canStandardAddressFormat'?: string = 'D';
    /**
    * Specifies whether the preferred last line city name should be stored.
    */
    'outputPreferredCity'?: string = 'Z';
    /**
    * Specifies whether to return multinational characters, including diacritical marks such as umlauts or accents.
    */
    'outputMultinationalCharacters'?: string = 'N';
    /**
    * Specifies where to place station information.
    */
    'canDeliveryOfficeFormat'?: string = 'I';
    /**
    * Facilitates the conversion of rural route address converting into street-style address using the LACS.
    */
    'performLACSLink'?: string = 'Y';
    /**
    * Specifies whether ValidateMailingAddressUSCAN should return a street match or a PO Box/non-civic match when the address contains both civic and non-civic information.
    */
    'canDualAddressLogic'?: string = 'D';
    /**
    * Specifies whether to extract the urbanization name from AddressLine1 through AddressLine4 and place it in the USUrbanName output field. 
    */
    'extractUrb'?: string = 'N';
    /**
    * Specifies where to place secondary address information for U.S. addresses.
    */
    'standardAddressFormat'?: string = 'C';
    /**
    * Specifies how to determine the language (English or French) to use to format the address and directional.
    */
    'canFrenchFormat'?: string = 'C';
    /**
    * Determines if the location has been unoccupied for at least 90 days.
    */
    'dPVDetermineVacancy'?: string = 'N';
    /**
    * Specifies the default apartment label to use in the output if there is no apartment label in the input address. rhis is specific to English addresses.
    */
    'canEnglishApartmentLabel'?: string = 'Apt';
    /**
    * Specifies whether to supress addresses with Carrier Route R777.
    */
    'suppressZplusPhantomCarrierR777'?: string = 'N';
    /**
    * Specifies whether or not to return the city alias when the alias is in the input address.
    */
    'canOutputCityAlias'?: string = 'N';
    /**
    * Specifies how to format city names that have short city name or non-mailing city name alternatives.
    */
    'outputShortCityName'?: string = 'N';

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "outputAddressBlocks",
            "baseName": "OutputAddressBlocks",
            "type": "string"
        },
        {
            "name": "performUSProcessing",
            "baseName": "PerformUSProcessing",
            "type": "string"
        },
        {
            "name": "performDPV",
            "baseName": "PerformDPV",
            "type": "string"
        },
        {
            "name": "outputFormattedOnFail",
            "baseName": "OutputFormattedOnFail",
            "type": "string"
        },
        {
            "name": "outputPostalCodeSeparator",
            "baseName": "OutputPostalCodeSeparator",
            "type": "string"
        },
        {
            "name": "outputCountryFormat",
            "baseName": "OutputCountryFormat",
            "type": "string"
        },
        {
            "name": "keepMultimatch",
            "baseName": "KeepMultimatch",
            "type": "string"
        },
        {
            "name": "outputCasing",
            "baseName": "OutputCasing",
            "type": "string"
        },
        {
            "name": "maximumResults",
            "baseName": "MaximumResults",
            "type": "string"
        },
        {
            "name": "outputRecordType",
            "baseName": "OutputRecordType",
            "type": "string"
        },
        {
            "name": "outputFieldLevelReturnCodes",
            "baseName": "OutputFieldLevelReturnCodes",
            "type": "string"
        },
        {
            "name": "dPVDetermineNoStat",
            "baseName": "DPVDetermineNoStat",
            "type": "string"
        },
        {
            "name": "streetMatchingStrictness",
            "baseName": "StreetMatchingStrictness",
            "type": "string"
        },
        {
            "name": "canFrenchApartmentLabel",
            "baseName": "CanFrenchApartmentLabel",
            "type": "string"
        },
        {
            "name": "outputAbbreviatedAlias",
            "baseName": "OutputAbbreviatedAlias",
            "type": "string"
        },
        {
            "name": "dPVSuccessfulStatusCondition",
            "baseName": "DPVSuccessfulStatusCondition",
            "type": "string"
        },
        {
            "name": "standardAddressPMBLine",
            "baseName": "StandardAddressPMBLine",
            "type": "string"
        },
        {
            "name": "firmMatchingStrictness",
            "baseName": "FirmMatchingStrictness",
            "type": "string"
        },
        {
            "name": "canRuralRouteFormat",
            "baseName": "CanRuralRouteFormat",
            "type": "string"
        },
        {
            "name": "canPreferHouseNum",
            "baseName": "CanPreferHouseNum",
            "type": "string"
        },
        {
            "name": "outputPreferredAlias",
            "baseName": "OutputPreferredAlias",
            "type": "string"
        },
        {
            "name": "directionalMatchingStrictness",
            "baseName": "DirectionalMatchingStrictness",
            "type": "string"
        },
        {
            "name": "extractFirm",
            "baseName": "ExtractFirm",
            "type": "string"
        },
        {
            "name": "failOnCMRAMatch",
            "baseName": "FailOnCMRAMatch",
            "type": "string"
        },
        {
            "name": "canNonCivicFormat",
            "baseName": "CanNonCivicFormat",
            "type": "string"
        },
        {
            "name": "canSSLVRFlg",
            "baseName": "CanSSLVRFlg",
            "type": "string"
        },
        {
            "name": "outputStreetNameAlias",
            "baseName": "OutputStreetNameAlias",
            "type": "string"
        },
        {
            "name": "performEWS",
            "baseName": "PerformEWS",
            "type": "string"
        },
        {
            "name": "canOutputCityFormat",
            "baseName": "CanOutputCityFormat",
            "type": "string"
        },
        {
            "name": "dualAddressLogic",
            "baseName": "DualAddressLogic",
            "type": "string"
        },
        {
            "name": "performSuiteLink",
            "baseName": "PerformSuiteLink",
            "type": "string"
        },
        {
            "name": "canStandardAddressFormat",
            "baseName": "CanStandardAddressFormat",
            "type": "string"
        },
        {
            "name": "outputPreferredCity",
            "baseName": "OutputPreferredCity",
            "type": "string"
        },
        {
            "name": "outputMultinationalCharacters",
            "baseName": "OutputMultinationalCharacters",
            "type": "string"
        },
        {
            "name": "canDeliveryOfficeFormat",
            "baseName": "CanDeliveryOfficeFormat",
            "type": "string"
        },
        {
            "name": "performLACSLink",
            "baseName": "PerformLACSLink",
            "type": "string"
        },
        {
            "name": "canDualAddressLogic",
            "baseName": "CanDualAddressLogic",
            "type": "string"
        },
        {
            "name": "extractUrb",
            "baseName": "ExtractUrb",
            "type": "string"
        },
        {
            "name": "standardAddressFormat",
            "baseName": "StandardAddressFormat",
            "type": "string"
        },
        {
            "name": "canFrenchFormat",
            "baseName": "CanFrenchFormat",
            "type": "string"
        },
        {
            "name": "dPVDetermineVacancy",
            "baseName": "DPVDetermineVacancy",
            "type": "string"
        },
        {
            "name": "canEnglishApartmentLabel",
            "baseName": "CanEnglishApartmentLabel",
            "type": "string"
        },
        {
            "name": "suppressZplusPhantomCarrierR777",
            "baseName": "SuppressZplusPhantomCarrierR777",
            "type": "string"
        },
        {
            "name": "canOutputCityAlias",
            "baseName": "CanOutputCityAlias",
            "type": "string"
        },
        {
            "name": "outputShortCityName",
            "baseName": "OutputShortCityName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ValidateMailingAddressUSCANAPIOptions.attributeTypeMap;
    }
}

