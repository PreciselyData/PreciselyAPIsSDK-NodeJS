/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 11.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ErrorInfo } from '../model/errorInfo';
import { RouteResponse } from '../model/routeResponse';
import { TravelCostMatrixResponse } from '../model/travelCostMatrixResponse';

import { ObjectSerializer, Authentication, Interceptor } from '../model/models';
import { OAuth,oAuthCredInfo } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.precisely.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum RoutingServiceApiApiKeys {
}

export class RoutingServiceApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;
	protected authentications : OAuth;
    protected  oAuthCred : oAuthCredInfo;

	protected interceptors: Interceptor[] = [];
    constructor(oAuthObj: oAuthCredInfo);
    constructor(oAuthObj: oAuthCredInfo,basePath?: string)
    {
    if(oAuthObj)
    {
    this.oAuthCred=oAuthObj;
    }
    if (basePath) {
    this._basePath = basePath;
    }
    }
    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: RoutingServiceApiApiKeys, value: string) {
        this.authentications[RoutingServiceApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.objOAuthCredInfo.access_token = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Accepts addresses as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
     * @summary Gets Route By Address.
     * @param startAddress Starting address of the route.
     * @param endAddress Ending address of the route.
     * @param db Mode of commute.
     * @param country Three digit ISO country code.
     * @param intermediateAddresses List of intermediate points of the route.
     * @param returnIntermediatePoints return intermediate points
     * @param oip Specifies whether waypoints need to be optimized.
     * @param destinationSrs Specifies the desired coordinate system of the returned route.
     * @param optimizeBy Specifies whether the route should be optimized by time or distance.
     * @param returnDistance Specifies whether distance needs to be part of direction information in response.
     * @param distanceUnit Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard).
     * @param returnTime Specifies whether time needs to be part of direction information in response.
     * @param timeUnit Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond)
     * @param language Specifies the language of travel directions.
     * @param directionsStyle Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse).
     * @param segmentGeometryStyle Specifies whether the route geometry is to be returned in the response and in what detail (End or All).
     * @param primaryNameOnly If true then only the primary street name is returned otherwise all the names for a street.
     * @param majorRoads Whether to include all roads in route calculation or just major roads.
     * @param historicTrafficTimeBucket Specifies whether routing calculation uses the historic traffic speeds.
     * @param returnDirectionGeometry Whether to include geometry associated with each route instruction in response.
     * @param useCvr This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs.
     * @param looseningBarrierRestrictions Specifies that barriers will be removed when determining the route.
     * @param vehicleType vehicle type.
     * @param weight Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param weightUnit The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton).
     * @param height Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param heightUnit The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param length Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param lengthUnit The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param width Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param widthUnit The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     */
    public async getRouteByAddress (startAddress?: string, endAddress?: string, db?: string, country?: string, intermediateAddresses?: string, returnIntermediatePoints?: string, oip?: string, destinationSrs?: string, optimizeBy?: string, returnDistance?: string, distanceUnit?: string, returnTime?: string, timeUnit?: string, language?: string, directionsStyle?: string, segmentGeometryStyle?: string, primaryNameOnly?: string, majorRoads?: string, historicTrafficTimeBucket?: string, returnDirectionGeometry?: string, useCvr?: string, looseningBarrierRestrictions?: string, vehicleType?: string, weight?: string, weightUnit?: string, height?: string, heightUnit?: string, length?: string, lengthUnit?: string, width?: string, widthUnit?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: RouteResponse;  }> {
        const localVarPath = this._basePath + '/routing/v1/route/byaddress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (startAddress !== undefined) {
            localVarQueryParameters['startAddress'] = ObjectSerializer.serialize(startAddress, "string");
        }

        if (endAddress !== undefined) {
            localVarQueryParameters['endAddress'] = ObjectSerializer.serialize(endAddress, "string");
        }

        if (db !== undefined) {
            localVarQueryParameters['db'] = ObjectSerializer.serialize(db, "string");
        }

        if (country !== undefined) {
            localVarQueryParameters['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (intermediateAddresses !== undefined) {
            localVarQueryParameters['intermediateAddresses'] = ObjectSerializer.serialize(intermediateAddresses, "string");
        }

        if (returnIntermediatePoints !== undefined) {
            localVarQueryParameters['returnIntermediatePoints'] = ObjectSerializer.serialize(returnIntermediatePoints, "string");
        }

        if (oip !== undefined) {
            localVarQueryParameters['oip'] = ObjectSerializer.serialize(oip, "string");
        }

        if (destinationSrs !== undefined) {
            localVarQueryParameters['destinationSrs'] = ObjectSerializer.serialize(destinationSrs, "string");
        }

        if (optimizeBy !== undefined) {
            localVarQueryParameters['optimizeBy'] = ObjectSerializer.serialize(optimizeBy, "string");
        }

        if (returnDistance !== undefined) {
            localVarQueryParameters['returnDistance'] = ObjectSerializer.serialize(returnDistance, "string");
        }

        if (distanceUnit !== undefined) {
            localVarQueryParameters['distanceUnit'] = ObjectSerializer.serialize(distanceUnit, "string");
        }

        if (returnTime !== undefined) {
            localVarQueryParameters['returnTime'] = ObjectSerializer.serialize(returnTime, "string");
        }

        if (timeUnit !== undefined) {
            localVarQueryParameters['timeUnit'] = ObjectSerializer.serialize(timeUnit, "string");
        }

        if (language !== undefined) {
            localVarQueryParameters['language'] = ObjectSerializer.serialize(language, "string");
        }

        if (directionsStyle !== undefined) {
            localVarQueryParameters['directionsStyle'] = ObjectSerializer.serialize(directionsStyle, "string");
        }

        if (segmentGeometryStyle !== undefined) {
            localVarQueryParameters['segmentGeometryStyle'] = ObjectSerializer.serialize(segmentGeometryStyle, "string");
        }

        if (primaryNameOnly !== undefined) {
            localVarQueryParameters['primaryNameOnly'] = ObjectSerializer.serialize(primaryNameOnly, "string");
        }

        if (majorRoads !== undefined) {
            localVarQueryParameters['majorRoads'] = ObjectSerializer.serialize(majorRoads, "string");
        }

        if (historicTrafficTimeBucket !== undefined) {
            localVarQueryParameters['historicTrafficTimeBucket'] = ObjectSerializer.serialize(historicTrafficTimeBucket, "string");
        }

        if (returnDirectionGeometry !== undefined) {
            localVarQueryParameters['returnDirectionGeometry'] = ObjectSerializer.serialize(returnDirectionGeometry, "string");
        }

        if (useCvr !== undefined) {
            localVarQueryParameters['useCvr'] = ObjectSerializer.serialize(useCvr, "string");
        }

        if (looseningBarrierRestrictions !== undefined) {
            localVarQueryParameters['looseningBarrierRestrictions'] = ObjectSerializer.serialize(looseningBarrierRestrictions, "string");
        }

        if (vehicleType !== undefined) {
            localVarQueryParameters['vehicleType'] = ObjectSerializer.serialize(vehicleType, "string");
        }

        if (weight !== undefined) {
            localVarQueryParameters['weight'] = ObjectSerializer.serialize(weight, "string");
        }

        if (weightUnit !== undefined) {
            localVarQueryParameters['weightUnit'] = ObjectSerializer.serialize(weightUnit, "string");
        }

        if (height !== undefined) {
            localVarQueryParameters['height'] = ObjectSerializer.serialize(height, "string");
        }

        if (heightUnit !== undefined) {
            localVarQueryParameters['heightUnit'] = ObjectSerializer.serialize(heightUnit, "string");
        }

        if (length !== undefined) {
            localVarQueryParameters['length'] = ObjectSerializer.serialize(length, "string");
        }

        if (lengthUnit !== undefined) {
            localVarQueryParameters['lengthUnit'] = ObjectSerializer.serialize(lengthUnit, "string");
        }

        if (width !== undefined) {
            localVarQueryParameters['width'] = ObjectSerializer.serialize(width, "string");
        }

        if (widthUnit !== undefined) {
            localVarQueryParameters['widthUnit'] = ObjectSerializer.serialize(widthUnit, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        

   //return this.authentications.oAuth2Password.applyToRequest()
    //.then((data)=>{

       // this.authentications.default.applyToRequest(localVarRequestOptions);
        localVarRequestOptions.headers = {"authorization":"Bearer " + this.oAuthCred.access_token};
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }

        return new Promise<{ response: http.IncomingMessage; body: RouteResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject(response);
                    }
                }
            });
        });


   /* })
    .catch((error) =>{
    return Promise.reject(error);
    });*/
    }
    /**
     * Accepts latitude & longitude as input and Returns Point-to-Point and Multi-Point travel directions by various travel modes.
     * @summary Gets Route By Location.
     * @param startPoint Start Point in \&#39;Lat,Long,coordsys\&#39; format.
     * @param endPoint End Point in \&#39;Lat,Long,coordsys\&#39; format.
     * @param db Mode of commute.
     * @param intermediatePoints List of intermediate points of the route.
     * @param returnIntermediatePoints returnIntermediatePoints route.
     * @param oip Specifies whether waypoints need to be optimized.
     * @param destinationSrs Specifies the desired coordinate system of the returned route.
     * @param optimizeBy Specifies whether the route should be optimized by time or distance.
     * @param returnDistance Specifies whether distance needs to be part of direction information in response.
     * @param distanceUnit Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard).
     * @param returnTime Specifies whether time needs to be part of direction information in response.
     * @param timeUnit Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond)
     * @param language Specifies the language of travel directions.
     * @param directionsStyle Specifies whether route directions text is to be returned in the response and in what detail (Normal or Terse).
     * @param segmentGeometryStyle Specifies whether the route geometry is to be returned in the response and in what detail (End or All).
     * @param primaryNameOnly If true then only the primary street name is returned otherwise all the names for a street.
     * @param majorRoads Whether to include all roads in route calculation or just major roads.
     * @param historicTrafficTimeBucket Specifies whether routing calculation uses the historic traffic speeds.
     * @param returnDirectionGeometry Whether to include geometry associated with each route instruction in response.
     * @param useCvr This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs.
     * @param looseningBarrierRestrictions Specifies that barriers will be removed when determining the route.
     * @param vehicleType vehicle type.
     * @param weight Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param weightUnit The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton).
     * @param height Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param heightUnit The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param length Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param lengthUnit The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param width Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param widthUnit The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     */
    public async getRouteByLocation (startPoint?: string, endPoint?: string, db?: string, intermediatePoints?: string, returnIntermediatePoints?: string, oip?: string, destinationSrs?: string, optimizeBy?: string, returnDistance?: string, distanceUnit?: string, returnTime?: string, timeUnit?: string, language?: string, directionsStyle?: string, segmentGeometryStyle?: string, primaryNameOnly?: string, majorRoads?: string, historicTrafficTimeBucket?: string, returnDirectionGeometry?: string, useCvr?: string, looseningBarrierRestrictions?: string, vehicleType?: string, weight?: string, weightUnit?: string, height?: string, heightUnit?: string, length?: string, lengthUnit?: string, width?: string, widthUnit?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: RouteResponse;  }> {
        const localVarPath = this._basePath + '/routing/v1/route/bylocation';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (startPoint !== undefined) {
            localVarQueryParameters['startPoint'] = ObjectSerializer.serialize(startPoint, "string");
        }

        if (endPoint !== undefined) {
            localVarQueryParameters['endPoint'] = ObjectSerializer.serialize(endPoint, "string");
        }

        if (db !== undefined) {
            localVarQueryParameters['db'] = ObjectSerializer.serialize(db, "string");
        }

        if (intermediatePoints !== undefined) {
            localVarQueryParameters['intermediatePoints'] = ObjectSerializer.serialize(intermediatePoints, "string");
        }

        if (returnIntermediatePoints !== undefined) {
            localVarQueryParameters['returnIntermediatePoints'] = ObjectSerializer.serialize(returnIntermediatePoints, "string");
        }

        if (oip !== undefined) {
            localVarQueryParameters['oip'] = ObjectSerializer.serialize(oip, "string");
        }

        if (destinationSrs !== undefined) {
            localVarQueryParameters['destinationSrs'] = ObjectSerializer.serialize(destinationSrs, "string");
        }

        if (optimizeBy !== undefined) {
            localVarQueryParameters['optimizeBy'] = ObjectSerializer.serialize(optimizeBy, "string");
        }

        if (returnDistance !== undefined) {
            localVarQueryParameters['returnDistance'] = ObjectSerializer.serialize(returnDistance, "string");
        }

        if (distanceUnit !== undefined) {
            localVarQueryParameters['distanceUnit'] = ObjectSerializer.serialize(distanceUnit, "string");
        }

        if (returnTime !== undefined) {
            localVarQueryParameters['returnTime'] = ObjectSerializer.serialize(returnTime, "string");
        }

        if (timeUnit !== undefined) {
            localVarQueryParameters['timeUnit'] = ObjectSerializer.serialize(timeUnit, "string");
        }

        if (language !== undefined) {
            localVarQueryParameters['language'] = ObjectSerializer.serialize(language, "string");
        }

        if (directionsStyle !== undefined) {
            localVarQueryParameters['directionsStyle'] = ObjectSerializer.serialize(directionsStyle, "string");
        }

        if (segmentGeometryStyle !== undefined) {
            localVarQueryParameters['segmentGeometryStyle'] = ObjectSerializer.serialize(segmentGeometryStyle, "string");
        }

        if (primaryNameOnly !== undefined) {
            localVarQueryParameters['primaryNameOnly'] = ObjectSerializer.serialize(primaryNameOnly, "string");
        }

        if (majorRoads !== undefined) {
            localVarQueryParameters['majorRoads'] = ObjectSerializer.serialize(majorRoads, "string");
        }

        if (historicTrafficTimeBucket !== undefined) {
            localVarQueryParameters['historicTrafficTimeBucket'] = ObjectSerializer.serialize(historicTrafficTimeBucket, "string");
        }

        if (returnDirectionGeometry !== undefined) {
            localVarQueryParameters['returnDirectionGeometry'] = ObjectSerializer.serialize(returnDirectionGeometry, "string");
        }

        if (useCvr !== undefined) {
            localVarQueryParameters['useCvr'] = ObjectSerializer.serialize(useCvr, "string");
        }

        if (looseningBarrierRestrictions !== undefined) {
            localVarQueryParameters['looseningBarrierRestrictions'] = ObjectSerializer.serialize(looseningBarrierRestrictions, "string");
        }

        if (vehicleType !== undefined) {
            localVarQueryParameters['vehicleType'] = ObjectSerializer.serialize(vehicleType, "string");
        }

        if (weight !== undefined) {
            localVarQueryParameters['weight'] = ObjectSerializer.serialize(weight, "string");
        }

        if (weightUnit !== undefined) {
            localVarQueryParameters['weightUnit'] = ObjectSerializer.serialize(weightUnit, "string");
        }

        if (height !== undefined) {
            localVarQueryParameters['height'] = ObjectSerializer.serialize(height, "string");
        }

        if (heightUnit !== undefined) {
            localVarQueryParameters['heightUnit'] = ObjectSerializer.serialize(heightUnit, "string");
        }

        if (length !== undefined) {
            localVarQueryParameters['length'] = ObjectSerializer.serialize(length, "string");
        }

        if (lengthUnit !== undefined) {
            localVarQueryParameters['lengthUnit'] = ObjectSerializer.serialize(lengthUnit, "string");
        }

        if (width !== undefined) {
            localVarQueryParameters['width'] = ObjectSerializer.serialize(width, "string");
        }

        if (widthUnit !== undefined) {
            localVarQueryParameters['widthUnit'] = ObjectSerializer.serialize(widthUnit, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        

   //return this.authentications.oAuth2Password.applyToRequest()
    //.then((data)=>{

       // this.authentications.default.applyToRequest(localVarRequestOptions);
        localVarRequestOptions.headers = {"authorization":"Bearer " + this.oAuthCred.access_token};
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }

        return new Promise<{ response: http.IncomingMessage; body: RouteResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject(response);
                    }
                }
            });
        });


   /* })
    .catch((error) =>{
    return Promise.reject(error);
    });*/
    }
    /**
     * Accepts addresses as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
     * @summary Get Cost Matrix By Address.
     * @param startAddresses Start locations in text based addresses.
     * @param endAddresses End locations in text based addresses.
     * @param country 3 Digit ISO country code.
     * @param db Mode of commute.
     * @param optimizeBy Specifies whether routes should be optimized by time or distance.
     * @param returnDistance Specifies whether distance needs to be returned in response.
     * @param destinationSrs Specifies the desired coordinate system of returned routes.
     * @param distanceUnit Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard).
     * @param returnTime Specifies whether time needs to be returned in response.
     * @param timeUnit Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond).
     * @param majorRoads Whether to include all roads in routes calculation or just major roads.
     * @param returnOptimalRoutesOnly Specifies whether to return only the optimized route for each start and end point combination.
     * @param historicTrafficTimeBucket Specifies whether routing calculation uses the historic traffic speeds.
     * @param useCvr This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs.
     * @param looseningBarrierRestrictions Specifies that barriers will be removed when determining the route.
     * @param vehicleType vehicle type.
     * @param weight Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param weightUnit The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton).
     * @param height Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param heightUnit The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param length Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param lengthUnit The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param width Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param widthUnit The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     */
    public async getTravelCostMatrixByAddress (startAddresses?: string, endAddresses?: string, country?: string, db?: string, optimizeBy?: string, returnDistance?: string, destinationSrs?: string, distanceUnit?: string, returnTime?: string, timeUnit?: string, majorRoads?: string, returnOptimalRoutesOnly?: string, historicTrafficTimeBucket?: string, useCvr?: string, looseningBarrierRestrictions?: string, vehicleType?: string, weight?: string, weightUnit?: string, height?: string, heightUnit?: string, length?: string, lengthUnit?: string, width?: string, widthUnit?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TravelCostMatrixResponse;  }> {
        const localVarPath = this._basePath + '/routing/v1/travelcostmatrix/byaddress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'application/xml'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (startAddresses !== undefined) {
            localVarQueryParameters['startAddresses'] = ObjectSerializer.serialize(startAddresses, "string");
        }

        if (endAddresses !== undefined) {
            localVarQueryParameters['endAddresses'] = ObjectSerializer.serialize(endAddresses, "string");
        }

        if (country !== undefined) {
            localVarQueryParameters['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (db !== undefined) {
            localVarQueryParameters['db'] = ObjectSerializer.serialize(db, "string");
        }

        if (optimizeBy !== undefined) {
            localVarQueryParameters['optimizeBy'] = ObjectSerializer.serialize(optimizeBy, "string");
        }

        if (returnDistance !== undefined) {
            localVarQueryParameters['returnDistance'] = ObjectSerializer.serialize(returnDistance, "string");
        }

        if (destinationSrs !== undefined) {
            localVarQueryParameters['destinationSrs'] = ObjectSerializer.serialize(destinationSrs, "string");
        }

        if (distanceUnit !== undefined) {
            localVarQueryParameters['distanceUnit'] = ObjectSerializer.serialize(distanceUnit, "string");
        }

        if (returnTime !== undefined) {
            localVarQueryParameters['returnTime'] = ObjectSerializer.serialize(returnTime, "string");
        }

        if (timeUnit !== undefined) {
            localVarQueryParameters['timeUnit'] = ObjectSerializer.serialize(timeUnit, "string");
        }

        if (majorRoads !== undefined) {
            localVarQueryParameters['majorRoads'] = ObjectSerializer.serialize(majorRoads, "string");
        }

        if (returnOptimalRoutesOnly !== undefined) {
            localVarQueryParameters['returnOptimalRoutesOnly'] = ObjectSerializer.serialize(returnOptimalRoutesOnly, "string");
        }

        if (historicTrafficTimeBucket !== undefined) {
            localVarQueryParameters['historicTrafficTimeBucket'] = ObjectSerializer.serialize(historicTrafficTimeBucket, "string");
        }

        if (useCvr !== undefined) {
            localVarQueryParameters['useCvr'] = ObjectSerializer.serialize(useCvr, "string");
        }

        if (looseningBarrierRestrictions !== undefined) {
            localVarQueryParameters['looseningBarrierRestrictions'] = ObjectSerializer.serialize(looseningBarrierRestrictions, "string");
        }

        if (vehicleType !== undefined) {
            localVarQueryParameters['vehicleType'] = ObjectSerializer.serialize(vehicleType, "string");
        }

        if (weight !== undefined) {
            localVarQueryParameters['weight'] = ObjectSerializer.serialize(weight, "string");
        }

        if (weightUnit !== undefined) {
            localVarQueryParameters['weightUnit'] = ObjectSerializer.serialize(weightUnit, "string");
        }

        if (height !== undefined) {
            localVarQueryParameters['height'] = ObjectSerializer.serialize(height, "string");
        }

        if (heightUnit !== undefined) {
            localVarQueryParameters['heightUnit'] = ObjectSerializer.serialize(heightUnit, "string");
        }

        if (length !== undefined) {
            localVarQueryParameters['length'] = ObjectSerializer.serialize(length, "string");
        }

        if (lengthUnit !== undefined) {
            localVarQueryParameters['lengthUnit'] = ObjectSerializer.serialize(lengthUnit, "string");
        }

        if (width !== undefined) {
            localVarQueryParameters['width'] = ObjectSerializer.serialize(width, "string");
        }

        if (widthUnit !== undefined) {
            localVarQueryParameters['widthUnit'] = ObjectSerializer.serialize(widthUnit, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        

   //return this.authentications.oAuth2Password.applyToRequest()
    //.then((data)=>{

       // this.authentications.default.applyToRequest(localVarRequestOptions);
        localVarRequestOptions.headers = {"authorization":"Bearer " + this.oAuthCred.access_token};
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }

        return new Promise<{ response: http.IncomingMessage; body: TravelCostMatrixResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject(response);
                    }
                }
            });
        });


   /* })
    .catch((error) =>{
    return Promise.reject(error);
    });*/
    }
    /**
     * Accepts latitude & longitude as input and Returns travel distances and times for multiple origins to multiple destinations by various travel modes.
     * @summary Get Cost Matrix By Location.
     * @param startPoints The address to be searched.
     * @param endPoints The address to be searched.
     * @param db Mode of commute.
     * @param optimizeBy Specifies whether routes should be optimized by time or distance.
     * @param returnDistance Specifies whether distance needs to be returned in response.
     * @param destinationSrs Specifies the desired coordinate system of returned routes.
     * @param distanceUnit Return Distance Unit such as ft(Foot), km(Kilometer), mi(Mile), m(Meter) or yd(Yard).
     * @param returnTime Specifies whether time needs to be returned in response.
     * @param timeUnit Return time unit such as min(Minute), h(Hour), s(Second) or msec(Millisecond).
     * @param majorRoads Whether to include all roads in routes calculation or just major roads.
     * @param returnOptimalRoutesOnly Specifies whether to return only the optimized route for each start and end point combination.
     * @param historicTrafficTimeBucket Specifies whether routing calculation uses the historic traffic speeds.
     * @param useCvr This parameter will enable/disable CVR (Commercial Vehicle Restrictions) capability in our APIs.
     * @param looseningBarrierRestrictions Specifies that barriers will be removed when determining the route.
     * @param vehicleType vehicle type.
     * @param weight Specifies the maximum weight of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param weightUnit The unit of weight eg. kg(kilogram), lb(pound), mt(metric ton), t(ton).
     * @param height Specifies the maximum height of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param heightUnit The unit of height e.g m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param length Specifies the maximum length of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param lengthUnit The unit of length eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     * @param width Specifies the maximum width of a vehicle. Any vehicles over this value will be restricted when determining the route.
     * @param widthUnit The unit of width eg. m(meter), km(kilometer), yd(yard), ft(foot), mi(mile).
     */
    public async getTravelCostMatrixByLocation (startPoints?: string, endPoints?: string, db?: string, optimizeBy?: string, returnDistance?: string, destinationSrs?: string, distanceUnit?: string, returnTime?: string, timeUnit?: string, majorRoads?: string, returnOptimalRoutesOnly?: string, historicTrafficTimeBucket?: string, useCvr?: string, looseningBarrierRestrictions?: string, vehicleType?: string, weight?: string, weightUnit?: string, height?: string, heightUnit?: string, length?: string, lengthUnit?: string, width?: string, widthUnit?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TravelCostMatrixResponse;  }> {
        const localVarPath = this._basePath + '/routing/v1/travelcostmatrix/bylocation';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'application/xml'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (startPoints !== undefined) {
            localVarQueryParameters['startPoints'] = ObjectSerializer.serialize(startPoints, "string");
        }

        if (endPoints !== undefined) {
            localVarQueryParameters['endPoints'] = ObjectSerializer.serialize(endPoints, "string");
        }

        if (db !== undefined) {
            localVarQueryParameters['db'] = ObjectSerializer.serialize(db, "string");
        }

        if (optimizeBy !== undefined) {
            localVarQueryParameters['optimizeBy'] = ObjectSerializer.serialize(optimizeBy, "string");
        }

        if (returnDistance !== undefined) {
            localVarQueryParameters['returnDistance'] = ObjectSerializer.serialize(returnDistance, "string");
        }

        if (destinationSrs !== undefined) {
            localVarQueryParameters['destinationSrs'] = ObjectSerializer.serialize(destinationSrs, "string");
        }

        if (distanceUnit !== undefined) {
            localVarQueryParameters['distanceUnit'] = ObjectSerializer.serialize(distanceUnit, "string");
        }

        if (returnTime !== undefined) {
            localVarQueryParameters['returnTime'] = ObjectSerializer.serialize(returnTime, "string");
        }

        if (timeUnit !== undefined) {
            localVarQueryParameters['timeUnit'] = ObjectSerializer.serialize(timeUnit, "string");
        }

        if (majorRoads !== undefined) {
            localVarQueryParameters['majorRoads'] = ObjectSerializer.serialize(majorRoads, "string");
        }

        if (returnOptimalRoutesOnly !== undefined) {
            localVarQueryParameters['returnOptimalRoutesOnly'] = ObjectSerializer.serialize(returnOptimalRoutesOnly, "string");
        }

        if (historicTrafficTimeBucket !== undefined) {
            localVarQueryParameters['historicTrafficTimeBucket'] = ObjectSerializer.serialize(historicTrafficTimeBucket, "string");
        }

        if (useCvr !== undefined) {
            localVarQueryParameters['useCvr'] = ObjectSerializer.serialize(useCvr, "string");
        }

        if (looseningBarrierRestrictions !== undefined) {
            localVarQueryParameters['looseningBarrierRestrictions'] = ObjectSerializer.serialize(looseningBarrierRestrictions, "string");
        }

        if (vehicleType !== undefined) {
            localVarQueryParameters['vehicleType'] = ObjectSerializer.serialize(vehicleType, "string");
        }

        if (weight !== undefined) {
            localVarQueryParameters['weight'] = ObjectSerializer.serialize(weight, "string");
        }

        if (weightUnit !== undefined) {
            localVarQueryParameters['weightUnit'] = ObjectSerializer.serialize(weightUnit, "string");
        }

        if (height !== undefined) {
            localVarQueryParameters['height'] = ObjectSerializer.serialize(height, "string");
        }

        if (heightUnit !== undefined) {
            localVarQueryParameters['heightUnit'] = ObjectSerializer.serialize(heightUnit, "string");
        }

        if (length !== undefined) {
            localVarQueryParameters['length'] = ObjectSerializer.serialize(length, "string");
        }

        if (lengthUnit !== undefined) {
            localVarQueryParameters['lengthUnit'] = ObjectSerializer.serialize(lengthUnit, "string");
        }

        if (width !== undefined) {
            localVarQueryParameters['width'] = ObjectSerializer.serialize(width, "string");
        }

        if (widthUnit !== undefined) {
            localVarQueryParameters['widthUnit'] = ObjectSerializer.serialize(widthUnit, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        

   //return this.authentications.oAuth2Password.applyToRequest()
    //.then((data)=>{

       // this.authentications.default.applyToRequest(localVarRequestOptions);
        localVarRequestOptions.headers = {"authorization":"Bearer " + this.oAuthCred.access_token};
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }

        return new Promise<{ response: http.IncomingMessage; body: TravelCostMatrixResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject(response);
                    }
                }
            });
        });


   /* })
    .catch((error) =>{
    return Promise.reject(error);
    });*/
    }
}
