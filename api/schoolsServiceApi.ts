/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * The version of the OpenAPI document: 12.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ErrorInfo } from '../model/errorInfo';
import { SchoolsNearByResponse } from '../model/schoolsNearByResponse';

import { ObjectSerializer, Authentication, Interceptor } from '../model/models';
import { OAuth,oAuthCredInfo } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.precisely.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SchoolsServiceApiApiKeys {
}

export class SchoolsServiceApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;
	protected authentications : OAuth;
    protected  oAuthCred : oAuthCredInfo;

	protected interceptors: Interceptor[] = [];
    constructor(oAuthObj: oAuthCredInfo);
    constructor(oAuthObj: oAuthCredInfo,basePath?: string)
    {
    if(oAuthObj)
    {
    this.oAuthCred=oAuthObj;
    }
    if (basePath) {
    this._basePath = basePath;
    }
    }
    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: SchoolsServiceApiApiKeys, value: string) {
        this.authentications[SchoolsServiceApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.objOAuthCredInfo.access_token = token;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Search Nearby Schools by Address
     * @summary Search Nearby Schools by Address
     * @param address free form address text
     * @param edLevel Single digit code for education level applicable values are P -&gt; primary, M -&gt; Middle, H -&gt; High, O -&gt; Mixed Grades for public school type andE -&gt; Elementary , S -&gt; Secondary , O -&gt; Others mixed grades for private schools 
     * @param schoolType Single digit code for schoolTypes applicable values are PRI and PUB
     * @param schoolSubType Single digit code for schoolSubType Applicable values are C, M, A, R, I, L, P, V, U, S (i.e. Charter, Magnet, Alternative, Regular, Indian, Military, Reportable Program, Vocational, Unknown, Special Education)
     * @param gender Single digit code for gender Applicable values are C, F, M (Coed, All Females, All Males) Applicable for Private Schools Only
     * @param assignedSchoolsOnly Single digit code for assignedSchoolOnly applicable values are  Y/N 
     * @param districtSchoolsOnly Single digit code for districtSchoolOnly applicable values are Y/N 
     * @param searchRadius Search Radius within which schools are searched
     * @param searchRadiusUnit Search Radius unit applicable values are feet,kilometers,miles,meters
     * @param travelTime Travel Time based on ‘travelMode’ within which schools are searched.
     * @param travelTimeUnit Travel Time unit applicable values are minutes,hours,seconds,milliseconds 
     * @param travelDistance Travel Distance based on ‘travelMode’ within which schools are searched.
     * @param travelDistanceUnit Travel distanceUnit applicable values are feet,kilometers,miles,meters
     * @param travelMode Travel mode Required when travelDistance or travelTime is specified. Accepted values are walking,driving
     * @param maxCandidates Max result to search 
     */
    public async getSchoolsByAddress (address: string, edLevel?: string, schoolType?: string, schoolSubType?: string, gender?: string, assignedSchoolsOnly?: string, districtSchoolsOnly?: string, searchRadius?: string, searchRadiusUnit?: string, travelTime?: string, travelTimeUnit?: string, travelDistance?: string, travelDistanceUnit?: string, travelMode?: string, maxCandidates?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SchoolsNearByResponse;  }> {
        const localVarPath = this._basePath + '/schools/v1/school/byaddress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json', 'application/xml'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'address' is not null or undefined
        if (address === null || address === undefined) {
            throw new Error('Required parameter address was null or undefined when calling getSchoolsByAddress.');
        }

        if (address !== undefined) {
            localVarQueryParameters['address'] = ObjectSerializer.serialize(address, "string");
        }

        if (edLevel !== undefined) {
            localVarQueryParameters['edLevel'] = ObjectSerializer.serialize(edLevel, "string");
        }

        if (schoolType !== undefined) {
            localVarQueryParameters['schoolType'] = ObjectSerializer.serialize(schoolType, "string");
        }

        if (schoolSubType !== undefined) {
            localVarQueryParameters['schoolSubType'] = ObjectSerializer.serialize(schoolSubType, "string");
        }

        if (gender !== undefined) {
            localVarQueryParameters['gender'] = ObjectSerializer.serialize(gender, "string");
        }

        if (assignedSchoolsOnly !== undefined) {
            localVarQueryParameters['assignedSchoolsOnly'] = ObjectSerializer.serialize(assignedSchoolsOnly, "string");
        }

        if (districtSchoolsOnly !== undefined) {
            localVarQueryParameters['districtSchoolsOnly'] = ObjectSerializer.serialize(districtSchoolsOnly, "string");
        }

        if (searchRadius !== undefined) {
            localVarQueryParameters['searchRadius'] = ObjectSerializer.serialize(searchRadius, "string");
        }

        if (searchRadiusUnit !== undefined) {
            localVarQueryParameters['searchRadiusUnit'] = ObjectSerializer.serialize(searchRadiusUnit, "string");
        }

        if (travelTime !== undefined) {
            localVarQueryParameters['travelTime'] = ObjectSerializer.serialize(travelTime, "string");
        }

        if (travelTimeUnit !== undefined) {
            localVarQueryParameters['travelTimeUnit'] = ObjectSerializer.serialize(travelTimeUnit, "string");
        }

        if (travelDistance !== undefined) {
            localVarQueryParameters['travelDistance'] = ObjectSerializer.serialize(travelDistance, "string");
        }

        if (travelDistanceUnit !== undefined) {
            localVarQueryParameters['travelDistanceUnit'] = ObjectSerializer.serialize(travelDistanceUnit, "string");
        }

        if (travelMode !== undefined) {
            localVarQueryParameters['travelMode'] = ObjectSerializer.serialize(travelMode, "string");
        }

        if (maxCandidates !== undefined) {
            localVarQueryParameters['maxCandidates'] = ObjectSerializer.serialize(maxCandidates, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        

   //return this.authentications.oAuth2Password.applyToRequest()
    //.then((data)=>{

       // this.authentications.default.applyToRequest(localVarRequestOptions);
        localVarRequestOptions.headers = {"authorization":"Bearer " + this.oAuthCred.access_token};
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }

        return new Promise<{ response: http.IncomingMessage; body: SchoolsNearByResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject(response);
                    }
                }
            });
        });


   /* })
    .catch((error) =>{
    return Promise.reject(error);
    });*/
    }
}
